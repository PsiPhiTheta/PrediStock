m
pwd
ls
dir
save.image()
save(subject1, pt_data, m, file = "mydata.RData")
write.csv(pt_data, file = "pt_data.csv")
install.packages("RODBC")
library(RODBC)
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
usedcars <- read.csv("/R/usedcars.csv", stringsAsFactors = FALSE)
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
usedcars
str(usedcars)
str(pt_data)
summary(usedcars$year)
summary(usedcars)
median(usedcars$year)
mean(usedcars$year)
range(usedcars$year)
IQR(usedcars$year)
quantile(usedcars$year)
quantile(usedcars$price)
quantile(usedcars$price, probs = c(0.01, 0.99))
quantile(usedcars$price, seq(from = 0, to = 1, by = 0.20))
boxplot(usedcars$price, main="Boxplot of Used Car Prices", ylab="Price ($)")
hist(usedcars$price, main = "Histogram of Used Car Prices",
xlab = "Price ($)")
hist(usedcars$price, main = "Histogram of Used Car Prices", xlab = "Price ($)")
var(usedcars$price)
sd(usedcars$price)
table(usedcars$price)
table(usedcars$year)
model_table <- table(usedcars$year)
prop.table(model_table)
color_table <- table(usedcars$color)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1)
plot(x = usedcars$mileage, y = usedcars$price, main = "Scatterplot of Price vs. Mileage", xlab = "Used Car Odometer (mi.)", ylab = "Used Car Price ($)")
install.packages("gmodels")
library(gmodels)
usedcars$conservative <- usedcars$color %in% c("Black", "Gray", "Silver", "White")
table(usedcars$conservative)
CrossTable(x = usedcars$model, y = usedcars$conservative)
usedcars
CrossTable(x = usedcars$model, y = usedcars$conservative, chisq = TRUE)
save.image()
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd
str(wbcd)
wbcd <- wbcd[-1]
str(wbcd)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
$diagnosis
"$diagnosis"
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
table(wbcd$diagnosis)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
remove(wbcd)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd <- wbcd[-1]
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
remove(normalize)
normalize <- function(x) {return ((x-min(x))/(max(x)-min(x)))}
normalize(c(1, 2, 3, 4, 5))
normalize(c((1, 2, 3, 4, 5)*100))
normalize(c(10, 20, 30, 40, 50))
this command applies the normalize() function to columns 2
through 31 in the wbcd data frame, converts the resulting list to a data frame, and
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd)
summary(wbcd_n)
summary(wbcd_n$area)
summary(wbcd_n$area_mean)
summary(wbcd_n$diagnosis)
summary(wbcd_n$size_mean)
summary(wbcd_n$ID)
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
install.packages("class")
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
remove(wbcd_test_pred)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_z <- as.data.frame(scale(wbcd[-1]))
summary(wbcd_z$area_mean)
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,prop.chisq=FALSE)
save.image()
q()
save.image()
load("~/.RData")
findFreqTerms(sms_dtm_train, 5)
install.packages("tm")
installed.packages()
install.packages("wordcloud")
library(tm)
library(wordcloud)
install.packages("class")
library(class)
install.packages("RWeka")
library(RWeka)
library(RWeka)
install.packages("RODBC")
library(RODBC)
findFreqTerms(sms_dtm_train, 5)
sms_dict <- c(findFreqTerms(sms_dtm_train, 5))
sms_train <- DocumentTermMatrix(sms_corpus_train, list(dictionary = sms_dict))
sms_test <- DocumentTermMatrix(sms_corpus_test, list(dictionary = sms_dict))
save.image()
convert_counts <- function(x) { x <- ifelse(x > 0, 1, 0) x <- factor(x, levels = c(0, 1), labels = c(""No"", ""Yes"")) return(x) }
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c(""No"", ""Yes""))
return(x)
}
sms_freq_words <- findFreqTerms(sms_dtm_train, 5)
str(sms_dtm_train)
str(sms_freq_words)
sms_dtm_freq_train<- sms_dtm_train[ , sms_freq_words]
sms_dtm_freq_test <- sms_dtm_test[ , sms_freq_words]
convert_counts <- function(x) { x <- ifelse(x > 0, "Yes", "No") }
sms_train <- apply(sms_dtm_freq_train, MARGIN = 2, convert_counts)
sms_test <- apply(sms_dtm_freq_test, MARGIN = 2, convert_counts)
install.packages("e1071")
library(e1071)
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
sms_train_labels <- sms_raw[1:4169, ]$type
sms_test_labels <- sms_raw[4170:5559, ]$type
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
sms_test_pred <- predict(sms_classifier, sms_test)
library(gmodels)
install.packages("gmodels")
CrossTable(sms_test_pred, sms_test_labels, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
sms_classifier2 <- naiveBayes(sms_train, sms_train_labels, laplace = 1)
sms_test_pred2 <- predict(sms_classifier2, sms_test)
CrossTable(sms_test_pred2, sms_test_labels, prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE, dnn = c('predicted', 'actual'))
save.image()
credit <- read.csv("credit.csv")
credit <- read.csv("credit.csv")
str(credit)
table(credit$checking_balance)
table(credit$savings_balance)
table(credit$default)
set.seed(123)
train_sample <- (1000, 900)
train_sample <- sample(1000, 900)
str(train_sample)
credit_train <- credit[train_sample, ]
credit_test <- credit[-train_sample, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
install.packages("C50")
install.packages("C50")
save.image()
install.packages("C50")
library(C50)
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_train$default <- as.factor(credit_train$default)
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model
summary(credit_model)
credit_pred <- predict(credit_model, credit_test)
CrossTable(credit_test$default, credit_pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
library(gmodels)
CrossTable(credit_test$default, credit_pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
credit_boost10 <- C5.0(credit_train[-17], credit_train$default, trials = 10)
summary(credit_boost10)
credit_boost_pred10 <- predict(credit_boost10, credit_test)
CrossTable(credit_test$default, credit_boost_pred10, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
matrix_dimensions <- list(c("no", "yes"), c("no", "yes"))
names(matrix_dimensions) <- c("predicted", "actual")
matrix_dimensions
error_cost <- matrix(c(0, 1, 4, 0), nrow = 2, dimnames = matrix_dimensions)
error_cost
credit_cost <- C5.0(credit_train[-17], credit_train$default, costs = error_cost)
credit_cost_pred <- predict(credit_cost, credit_test)
credit_cost <- C5.0(credit_train[-17], credit_train$default, costs = error_cost)
mushrooms <- read.csv("mushrooms.csv", stringsAsFactors = TRUE)
mushrooms <- read.csv("mushrooms.csv", stringsAsFactors = TRUE)
save.image()
str(mushrooms)
mushrooms$veil_type <- NULL
str(mushrooms)
table(mushrooms$type)
library(RWeka)
mushroom_1R <- OneR(type ~ ., data = mushrooms)
mushroom_1R
summary(mushroom_1R)
mushroom_JRip <- JRip(type ~ ., data = mushrooms)
mushroom_JRip
save.image()
launch <- read.csv("challenger.csv")
str(launch)
b <- cov(launch$temperature, launch$distress_ct) / var(launch$temperature)
b
a <- mean(launch$distress_ct) - b * mean(launch$temperature)
> a
a <- mean(launch$distress_ct) - b * mean(launch$temperature)
a
r <- cov(launch$temperature, launch$distress_ct) / (sd(launch$temperature) * sd(launch$distress_ct))
r
r <- cor(launch$temperature, launch$distress_ct)
r
reg <- function(y, x) {
x <- as.matrix(x)
x <- cbind(Intercept = 1, x)
b<-solve(t(x) %*% x) %*% t(x) %*% y
colnames(b) <- "estimate"
print(b)
}
reg <- function(y, x) {x <- as.matrix(x)
x <- cbind(Intercept = 1, x)
b<-solve(t(x) %*% x) %*% t(x) %*% y
colnames(b) <- "estimate"
print(b)
}
View(reg)
View(reg)
reg(y = launch$distress_ct, x = launch[2])
save.image()
print(credit)
print(credit_test)
history
insurance <- read.csv("insurance.csv", stringsAsFactors = TRUE)
str(insurance)
summary(insurance$expenses)
summary(insurance$charges)
hist(insurance$charges)
table(insurance$region)
cor(insurance[c("age", "bmi", "children", "expenses")])
cor(insurance[c("age", "bmi", "children", "charges")])
pairs(insurance[c("age", "bmi", "children", "charges")])
pairs.panels(insurance[c("age", "bmi", "children", "expenses")])
pairs.panels(insurance[c("age", "bmi", "children", "charges")])
install.packages("psych")
library(psych)
pairs.panels(insurance[c("age", "bmi", "children", "charges")])
ins_model <- lm(charges ~ age + children + bmi + sex + smoker + region, data = insurance)
ins_model
summary(ins_model)
insurance$age2 <- insurance$age^2
insurance$bmi30 <- ifelse(insurance$bmi >= 30, 1, 0)
ins_model2 <- lm(charges ~ age + age2 + children + bmi + sex + bmi30*smoker + region, data = insurance)
summary(ins_model2)
save.image()
tee <- c(1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 7, 7, 7)
a
at1 <- c(1, 1, 1, 2, 2, 3, 4, 5, 5)
at2 <- c(6, 6, 7, 7, 7, 7)
bt1 <- c(1, 1, 1, 2, 2, 3, 4)
bt2 <- c(5, 5, 6, 6, 7, 7, 7, 7)
sdr_a <- sd(tee) - (length(at1) / length(tee) * sd(at1) + length(at2) / length(tee) * sd(at2))
sdr_b <- sd(tee) - (length(bt1) / length(tee) * sd(bt1) + length(bt2) / length(tee) * sd(bt2))
sdr_a
sdr_b
wine <- read.csv("whitewines.csv")
str(wine)
hist(wine$quality)
wine_train <- wine[1:3750, ]
wine_test <- wine[3751:4898, ]
install.packages("rpart")
?rpart.control
??rpart.control
m.rpart <- rpart(quality ~ ., data = wine_train)
library(rpart)
?rpart.control
m.rpart <- rpart(quality ~ ., data = wine_train)
summary(wine)
summary(wine$quality)
wine
m.rpart
summary(m.rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(m.rpart, digits = 3)
rpart.plot(m.rpart, digits = 4, fallen.leaves = TRUE, type = 3, extra = 101)
rpart.plot(m.rpart, digits = 3)
rpart.plot(m.rpart, digits = 4, fallen.leaves = TRUE, type = 3, extra = 101)
p.rpart <- predict(m.rpart, wine_test)
summary(p.rpart)
summary(wine_test$quality)
cor(p.rpart, wine_test$quality)
MAE <- function(actual, predicted) { mean(abs(actual - predicted)) }
MAE(p.rpart, wine_test$quality)
library(RWeka)
m.m5p <- M5P(quality ~ ., data = wine_train)
m.m5p
summary(m.m5p)
MAE(wine_test$quality, p.m5p)
MAE(wine_test$quality, m.m5p)
p.m5p <- predict(m.m5p, wine_test)
summary(p.m5p)
cor(p.m5p, wine_test$quality)
MAE(wine_test$quality, p.m5p)
save.image()
concrete <- read.csv("concrete.csv")
str(concrete)
concrete_norm <- as.data.frame(lapply(concrete, normalize))
summary(concrete_norm$strength)
concrete_train <- concrete_norm[1:773, ]
concrete_test <- concrete_norm[774:1030, ]
install.packages("neuralnet")
concrete_model <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train)
library(neuralnet)
concrete_model <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train)
plot(concrete_model)
model_results <- compute(concrete_model, concrete_test[1:8])
predicted_strength <- model_results$net.result
cor(predicted_strength, concrete_test$strength)
concrete_model2 <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train, hidden = 5)
plto(concrete_model2)
plot(concrete_model2)
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)
plot(concrete_model2)
plot(concrete_model2)
plot(concrete_model2)
plot(concrete_model2)
save.image()
letters <- read.csv("letterdata.csv")
str(letters)
letters_train <- letters[1:16000, ]
letters_test <- letters[16001:20000, ]
install.packages("kernlab")
library(kernlab)
letter_classifier <- ksvm(letter ~ ., data = letters_train, kernel = "vanilladot")
letter_classifier
letter_predictions <- predict(letter_classifier, letters_test)
head(letter_predictions)
table(letter_predictions, letters_test$letter)
agreement <- letter_predictions == letters_test$letter
table(agreement)
prop.table(table(agreement))
letter_classifier_rbf <- ksvm(letter ~ ., data = letters_train, kernel = "rbfdot")
letter_predictions_rbf <- predict(letter_classifier_rbf, letters_test)
agreement_rbf <- letter_predictions_rbf == letters_test$letter
table(agreement_rbf)
prop.table(table(agreement_rbf))
save.image()
install.packages("arules")
library(arules)
groceries <- read.transactions("groceries.csv", sep = ",")
groceries <- read.transactions("groceries.csv", sep = ",")
summary(groceries)
inspect(groceries[1:5])
itemFrequency(groceries[, 1:3])
itemFrequencyPlot(groceries, support = 0.1)
itemFrequencyPlot(groceries, topN = 20)
image(groceries[1:5])
image(sample(groceries, 100))
image(sample(groceries))
image(sample(groceries, 1000))
image(sample(groceries, 200))
image(sample(groceries, 200))
image(sample(groceries, 200))
image(sample(groceries, 200))
image(sample(groceries, 50))
image(sample(groceries, 200))
image(sample(groceries, 50))
image(sample(groceries, 9000))
image(sample(groceries, 50))
apriori(groceries)
groceryrules <- apriori(groceries, parameter = list(support = 0.006, confidence = 0.25, minlen = 2))
groceryrules
summary(groceryrules)
inspect(groceryrules[1:3])
inspect(sort(groceryrules, by = "lift")[1:5])
inspect(sort(groceryrules, by = "support")[1:5])
inspect(sort(groceryrules, by = "confidence")[1:5])
berryrules <- subset(groceryrules, items %in% "berries")
inspect(berryrules)
herbsrules <- subset(groceryrules, items %in% "herbs")
inspect(herbsrules)
write(groceryrules, file = "groceryrules.csv", sep = ",", quote = TRUE, row.names = FALSE)
groceryrules_df <- as(groceryrules, "data.frame")
str(groceryrules_df)
save.image()
teens <- read.csv("snsdata.csv")
table(teens$gender, useNA = "ifany")
summary(teens$age)
teens$age <- ifelse(teens$age >= 13 & teens$age < 20, teens$age, NA)
teens$female <- ifelse(teens$gender == "F" & !is.na(teens$gender), 1, 0)
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
table(teens$gender, useNA = "ifany")
table(teens$female, useNA = "ifany")
table(teens$no_gender, useNA = "ifany")
mean(teens$age, na.rm = TRUE)
aggregate(data = teens, age ~ gradyear, mean, na.rm = TRUE)
ave_age <- ave(teens$age, teens$gradyear, FUN = function(x) mean(x, na.rm = TRUE))
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
summary(teens$age)
library(stats)
interests <- teens[5:40]
interests_z <- as.data.frame(lapply(interests, scale))
set.seed(2345)
teen_clusters <- kmeans(interests_z, 5)
teen_clusters$size
teen_clusters$centers
teens$cluster <- teen_clusters$cluster
teens[1:5, c("cluster", "gender", "age", "friends")]
aggregate(data = teens, age ~ cluster, mean)
aggregate(data = teens, female ~ cluster, mean)
save.image()
install.packages("caret")
install.packages("caret")
install.packages("irr")
install.packages("ROCR")
install.packages("C50")
install.packages("ipred")
save.image()
install.packages("kernlab")
library("kernlab")
library("randomforest")
library("randomForest")
install.packages("randomForest")
save.image()
predicted_prob <- predict(credit_model, credit_test, type = "prob")
library(C50)
predicted_prob <- predict(credit_model, credit_test, type = "prob")
predicted_prob
sms_test_prob <- predict(sms_classifier, sms_test, type = "raw")
library(e1071)
sms_test_prob <- predict(sms_classifier, sms_test, type = "raw")
head(sms_test_prob)
head(sms_results)
table(sms_results$actual_type, sms_results$predict_type)
library(gmodels)
(152 + 1203) / (152 + 1203 + 4 + 31)
(4 + 31) / (152 + 1203 + 4 + 31)
library(vcd)
installed.packages(vcd)
install.packages(vcd)
install.packages("vcd")
install.packages("vcd")
library(irr)
library(ROCR)
random_ids <- order(runif(1000))
credit_train <- credit[random_ids[1:500], ]
credit_validate <- credit[random_ids[501:750], ]
credit_test <- credit[random_ids[751:1000], ]
folds <- createFolds(credit$default, k = 10)
library(caret)
folds <- createFolds(credit$default, k = 10)
library(caret)
library(C50)
library(irr)
set.seed(123)
folds <- createFolds(credit$default, k = 10)
cv_results <- lapply(folds, function(x) {
credit_train <- credit[-x, ]
credit_test <- credit[x, ]
credit_model <- C5.0(default ~ ., data = credit_train)
credit_pred <- predict(credit_model, credit_test)
credit_actual <- credit_test$default
kappa <- kappa2(data.frame(credit_actual, credit_pred))$value
return(kappa)
})
cv_results <- lapply(folds, function(x) {credit_train <- credit[-x, ] credit_test <- credit[x, ] credit_model <- C5.0(default ~ ., data = credit_train) credit_pred <- predict(credit_model, credit_test) credit_actual <- credit_test$default kappa <- kappa2(data.frame(credit_actual, credit_pred))$value return(kappa)})
save.image()
library(caret)
set.seed(300)
m <- train(default ~ ., data = credit, method = "C5.0")
ctrl <- trainControl(method = "cv", number = 10, selectionFunction = "oneSE")
grid <- expand.grid(.model = "tree", .trials = c(1, 5, 10, 15, 20, 25, 30, 35), .winnow = "FALSE")
grid
set.seed(300)
m <- train(default ~ ., data = credit, method = "C5.0",
m <- train(default ~ ., data = credit, method = "C5.0", metric = "Kappa", trControl = ctrl, tuneGrid = grid)
library(ipred)
set.seed(300)
mybag <- bagging(default ~ ., data = credit, nbagg = 25)
credit_pred <- predict(mybag, credit)
table(credit_pred, credit$default)
library(caret)
set.seed(300)
ctrl <- trainControl(method = "cv", number = 10)
train(default ~ ., data = credit, method = "treebag", trControl = ctrl)
str(svmBag)
svmBag$fit
bagctrl <- bagControl(fit = svmBag$fit, predict = svmBag$pred, aggregate = svmBag$aggregate)
set.seed(300)
svmbag <- train(default ~ ., data = credit, "bag", trControl = ctrl, bagControl = bagctrl)
set.seed(300)
m_adaboost <- boosting(default ~ ., data = credit)
library(adaboost)
library(randomForest)
set.seed(300)
rf <- randomForest(default ~ ., data = credit)
y
rf <- randomForest(default ~ ., data = credit)
yes
rf
save.image()
